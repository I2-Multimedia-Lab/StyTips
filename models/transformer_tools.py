import torch
import math
import warnings
import torch.nn as nn
from itertools import repeat
from typing import Iterable


def _ntuple(n):
    """Copy item to be a tuple with n length (Implemented as timm)
    """
    def parse(x):
      if isinstance(x, Iterable):
        return x
      else:
        return tuple(repeat(x, n))
    return parse

to_2tuple = _ntuple(2)
to_ntuple = _ntuple


def _no_grad_trunc_normal_(tensor, mean, std, a, b):
    # Cut & paste from PyTorch official master until it's in a few official releases - RW
    # Method based on https://people.sc.fsu.edu/~jburkardt/presentations/truncated_normal.pdf
    def norm_cdf(x):
        # Computes standard normal cumulative distribution function
        return (1. + math.erf(x / math.sqrt(2.))) / 2.

    if (mean < a - 2 * std) or (mean > b + 2 * std):
        warnings.warn("mean is more than 2 std from [a, b] in nn.init.trunc_normal_. "
                      "The distribution of values may be incorrect.",
                      stacklevel=2)

    with torch.no_grad():
        # Values are generated by using a truncated uniform distribution and
        # then using the inverse CDF for the normal distribution.
        # Get upper and lower cdf values
        l = norm_cdf((a - mean) / std)
        u = norm_cdf((b - mean) / std)

        # Uniformly fill tensor with values from [l, u], then translate to
        # [2l-1, 2u-1].
        tensor.uniform_(2 * l - 1, 2 * u - 1)

        # Use inverse cdf transform for normal distribution to get truncated
        # standard normal
        tensor.erfinv_()

        # Transform to proper mean, std
        tensor.mul_(std * math.sqrt(2.))
        tensor.add_(mean)

        # Clamp to ensure it's in the proper range
        tensor.clamp_(min=a, max=b)
        return tensor

def trunc_normal_(tensor, mean=0., std=1., a=-2., b=2.):
    # type: (Tensor, float, float, float, float) -> Tensor
    r"""Fills the input Tensor with values drawn from a truncated
    normal distribution. The values are effectively drawn from the
    normal distribution :math:`\mathcal{N}(\text{mean}, \text{std}^2)`
    with values outside :math:`[a, b]` redrawn until they are within
    the bounds. The method used for generating the random values works
    best when :math:`a \leq \text{mean} \leq b`.
    Args:
        tensor: an n-dimensional `torch.Tensor`
        mean: the mean of the normal distribution
        std: the standard deviation of the normal distribution
        a: the minimum cutoff value
        b: the maximum cutoff value
    Examples:
        >>> w = torch.empty(3, 5)
        >>> nn.init.trunc_normal_(w)
    """
    return _no_grad_trunc_normal_(tensor, mean, std, a, b)

class DropPath(nn.Module):
    """Stochasticly zero channels of data.(Implemented as timm)
    """
    def __init__(self, drop=0.5, scale=True):
      super().__init__()
      self.drop = drop
      self.scale = scale

    def forward(self, x):
      return self.drop_path(x, self.drop, self.training, self.scale)

    def drop_path(self, x, drop=0.5, training=True, scale=True):
      if drop == 0. or not training:
        return x
      drop_p = 1 - drop
      shape = (x.shape[0],) + (1,) * (x.ndim - 1)
      random_tensor = x.new_empty(shape).bernoulli_(drop_p)
      if drop_p > 0. and scale:
        random_tensor.div_(drop_p)
    
      return x * random_tensor